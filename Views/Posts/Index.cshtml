@*@model IEnumerable<Blog.Models.CodeFirst.Post>*@
@model IPagedList<Blog.Models.CodeFirst.Post>
@using PagedList;
@using PagedList.Mvc;
@{
    ViewBag.Title = "Home Page";
}

@*

  <!--
    1. need to make the DateTime human readable ... had some difficulty with formatting similar to what I used in Details View
    2. fix the pagination to work for this page...
    3. implement  dot dot dot for excerpts
    4. 

  -->

    //model.Id -- auto
    //model.Created -- auto
    //model.Updated -- auto
    //model.Title [req]
    //model.Body [req]
    //model.Category
    //model.MediaUrl
    //model.Slug -- auto
    //model.Comments (list)
*@
  <img id="header-image" src="~/Content/second-movement.svg" />

  <div class="container">
  <div class="row">
    <div class="col-md-10 col-md-offset-1">
      @foreach (var item in Model)
      {
          <h3>@Html.DisplayFor(modelItem => item.Title)</h3>
          <p class="post-date">
            <span class="glyphicon glyphicon-time"></span>
            @item.Created.ToString("dddd, MMMM dd, yyyy")
          </p>
          <p>
            @if (User.IsInRole("Admin"))
            {
                <button class="btn btn-sm green-btn">
                  <i class="fa fa-pencil-square-o"></i>
                  @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                </button>
                <button class="btn btn-sm green-btn">
                  <i class="fa fa-times"></i>
                  @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </button>
            }
          </p>
          <div class="excerpt"><p>@Html.Raw(item.Body)</p></div>
        // as I understand it, we will be doing something a bit different with this, however
        // if I were to include 'references' or 'notes' for each, it could be displayed like this
        if (item.MediaUrl != null)
        {
              <p>Media: @Html.DisplayFor(modelItem => item.MediaUrl)</p>
        }
          @Html.ActionLink("Read More", "Details", new { slug = @item.Slug }, new { @class = "btn btn-primary col-sm-offset-10 col-xs-offset-8" })
          <hr class="blog-ridges" />
      }
      <!-- Pager is to be implemented soon...-->
      <p class="pages">Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount @Html.PagedListPager(Model, page => Url.Action("Index", new { page }))</p>
      @*<ul class="pager">
        <li class="previous">
          <a href="#">&larr; Older</a>
        </li>
        <li class="next">
          <a href="#">Newer &rarr;</a>
        </li>
      </ul>*@
    </div>
  </div>
</div>

@section Scripts {
  <script>
    $(document).ready(function () {
      $(".excerpt").dotdotdot({
        /*	The text to add as ellipsis. */
        ellipsis: '... ',

        /*	How to cut off the text/html: 'word'/'letter'/'children' */
        wrap: 'word',

        /*	Wrap-option fallback to 'letter' for long words */
        fallbackToLetter: true,

        /*	jQuery-selector for the element to keep and put after the ellipsis. */
        after: null,

        /*	Whether to update the ellipsis: true/'window' */
        watch: false,

        /*	Optionally set a max-height, can be a number or function.
          If null, the height will be measured. */
        height: 100,

        /*	Deviation for the height-option. */
        tolerance: 0,

        /*	Callback function that is fired after the ellipsis is added,
          receives two parameters: isTruncated(boolean), orgContent(string). */
        callback: function (isTruncated, orgContent) { },

        lastCharacter: {

          /*	Remove these characters from the end of the truncated text. */
          remove: [' ', ',', ';', '.', '!', '?'],

          /*	Don't add an ellipsis if this array contains 
            the last character of the truncated text. */
          noEllipsis: []
        }
      });
    });
  </script>

}

@*
    // if you need to limit to a specific role...
    @if (User.IsInRole("Admin")) {
      @Html.ActionLink("Create New", "Create")
    }

              @Html.DisplayNameFor(model => model.Created)
              @Html.DisplayNameFor(model => model.Updated)
              @Html.DisplayNameFor(model => model.Title)
              @Html.DisplayNameFor(model => model.Body)
              @Html.DisplayNameFor(model => model.MediaUrl)
              @Html.DisplayNameFor(model => model.Slug)
              @Html.DisplayNameFor(model => model.Category)
  @foreach (var item in Model) {
              @Html.DisplayFor(modelItem => item.Created)
              @Html.DisplayFor(modelItem => item.Updated)
              @Html.DisplayFor(modelItem => item.Title)
              @Html.Raw(item.Body)
              @Html.DisplayFor(modelItem => item.MediaUrl)
              @Html.DisplayFor(modelItem => item.Slug)
              @Html.DisplayFor(modelItem => item.Category)
              @Html.ActionLink("Edit", "Edit", new { id=item.Slug }) |
              @Html.ActionLink("Details", "Details", new { slug=item.Slug }) |
              @Html.ActionLink("Delete", "Delete", new { id=item.Slug })
*@
